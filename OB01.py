# Менеджер задач
# Задача: Создай класс Task, который позволяет управлять задачами (делами). У задачи должны быть атрибуты: описание задачи, срок выполнения и статус (выполнено/не выполнено). Реализуй функцию для добавления задач, отметки выполненных задач и вывода списка текущих (не выполненных) задач.
# *Дополнительное задание:
# Ты разрабатываешь программное обеспечение для сети магазинов. Каждый магазин в этой сети имеет свои особенности, но также существуют общие характеристики, такие как адрес, название и ассортимент товаров. Ваша задача — создать класс Store, который можно будет использовать для создания различных магазинов.
# Шаги:
# 1. Создай класс Store:
# -Атрибуты класса:
# name: название магазина.
# address: адрес магазина.
# items: словарь, где ключ - название товара, а значение - его цена. Например, {'apples': 0.5, 'bananas': 0.75}.
# Методы класса:
# __init__ - конструктор, который инициализирует название и адрес, а также пустой словарь дляitems`.
# -  метод для добавления товара в ассортимент.
# метод для удаления товара из ассортимента.
# метод для получения цены товара по его названию. Если товар отсутствует, возвращайте None.
# метод для обновления цены товара.
#
# 2. Создай несколько объектов класса Store:
# Создай не менее трех различных магазинов с разными названиями, адресами и добавь в каждый из них несколько товаров.
#
# 3. Протестировать методы:
# Выбери один из созданных магазинов и протестируй все его методы: добавь товар, обнови цену, убери товар и запрашивай цену.
# В поле для ответа загрузи ссылку на GitHub-репозиторий, содержащий код проекта с реализацией задания.

class Store():
    def __init__(self, name:str, address:str, items:dict):
        self.name = name
        self.address = address
        self.items = items

    def add_item(self, item:str, price:float):
        self.items[item] = price

    def del_item(self, item:str):
        try:
            return self.items.pop(item)
        except KeyError:
            return 'Товар не найден'

    def get_price(self, item:str):
        if self.items[item]:
            return self.items[item]
        else:
            return None

    def update_price(self, item:str, price:str):
        if self.items[item]:
            self.items[item] = price
        else:
            print('Товар не найден')

    def store_info(self):
        print(f'Название магазина: {self.name}')
        print(f'Адрес магазина: {self.address}')
        print(f'Номенклатура магазина: {self.items}')
        print()


store_1 = Store('"Рога и копыта"', "Рогокопытная 1, 48", {'Рога': 10, 'Копыта': 20})
store_2 = Store('"Копыта и рога"', "Копыторожская 48, 1", {'Рога': 30, 'Копыта': 40})
store_3 = Store('"Рога без копыт"', "Безкопытная 1, 1", {'Рога': 50, 'Рожки': 60})


print('2) Вывести данные магазинов')
store_1.store_info()
store_2.store_info()
store_3.store_info()


print()
print(f'3) Проверить методы на магазине {store_1.name}')

store_1.add_item('Уши', 30)
store_1.add_item('Хвосты', 40)
print(f'3.1) Добавлены новые товары, текущая номенклатура {store_1.items}')

store_1.del_item('Уши')
print(f'3.2) Удален товар "Уши", текущая номенклатура: {store_1.items}')
print(f'3.3) При повторном удалении, товар не найден, пользователь получает сообщение: {store_1.del_item('Уши')}')

store_1.update_price('Хвосты', 10.5)
print(f'3.4) Изменена стоимость товара "Хвосты", текущая цена: {store_1.items["Хвосты"]}')